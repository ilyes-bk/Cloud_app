2025-01-07 08:03:39,212 - INFO - Starting the tools module
2025-01-07 08:03:39,324 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:03:39,350 - WARNING -  * Debugger is active!
2025-01-07 08:03:39,356 - INFO -  * Debugger PIN: 100-039-195
2025-01-07 08:03:40,039 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:13:53,841 - INFO -  * Detected change in 'C:\\Users\\SBS\\PycharmProjects\\miika_project_upwork\\agent-x1\\assistant\\tools.py', reloading
2025-01-07 08:13:58,058 - INFO - Starting the tools module
2025-01-07 08:13:58,113 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:13:58,194 - WARNING -  * Debugger is active!
2025-01-07 08:13:58,199 - INFO -  * Debugger PIN: 100-039-195
2025-01-07 08:13:58,772 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:18:39,742 - INFO - Starting the tools module
2025-01-07 08:18:39,878 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:18:39,884 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.1.24:8000
2025-01-07 08:18:39,884 - INFO - [33mPress CTRL+C to quit[0m
2025-01-07 08:18:39,885 - INFO -  * Restarting with stat
2025-01-07 08:18:40,572 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:18:43,863 - INFO - Starting the tools module
2025-01-07 08:18:43,999 - WARNING -  * Debugger is active!
2025-01-07 08:18:44,005 - INFO -  * Debugger PIN: 100-039-195
2025-01-07 08:18:44,570 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:18:45,820 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2025-01-07 08:18:45,875 - INFO - 127.0.0.1 - - [07/Jan/2025 08:18:45] "POST /api/eb25919b-2531-4cbc-8267-f8cbc700281e HTTP/1.1" 200 -
2025-01-07 08:18:45,962 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': " You are a helpful customer service assistant for business selling saunas and sauna heaters online.  If the question is about products, orders or conversations with customers, Use provided tools to get information regarding conversations, sold products, orders and other things related to running the customer service  If the question is not about the information available in tools, use your existing knowledge to craft sensible answers  When searching, be persistent. Expand your query bounds if the first search returns no results.  If you don't have answer, just say you couldn't find answer ", 'role': 'system'}, {'content': 'hello', 'role': 'user'}, {'content': 'Hello! How can I assist you today?', 'role': 'assistant'}, {'content': 'what\'s going on with order "5796018159906"', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_5pVd0XX8WxrV515e7ieOOdn2', 'function': {'name': 'find_order_information', 'arguments': '{"order_number": "5796018159906"}'}}]}, {'content': '{"id": "gid://shopify/Order/5796018159906", "name": "#1008", "createdAt": "2024-06-07T12:40:12Z", "displayFulfillmentStatus": "UNFULFILLED", "customer": {"displayName": "Miika Tuomela", "email": "mktuomela@gmail.com", "phone": null}, "events": [], "fulfillments": [], "lineItems": [{"id": "gid://shopify/LineItem/14636668846370", "title": "Test product 1", "quantity": 1}], "link": "https://admin.shopify.com/store/sisu-apps-demo/orders/gid:"}', 'role': 'tool', 'tool_call_id': 'call_5pVd0XX8WxrV515e7ieOOdn2'}, {'content': 'The order with the number "5796018159906" (Order #1008) was created on June 7, 2024. Here are the details:\n\n- **Customer**: Miika Tuomela\n- **Email**: mktuomela@gmail.com\n- **Fulfillment Status**: Unfulfilled\n- **Items Ordered**: \n  - **Test product 1** (Quantity: 1)\n\nCurrently, the order has not been fulfilled, and there are no fulfillment events recorded yet.\n\nIf you need any further assistance or specific information, feel free to ask!', 'role': 'assistant'}, {'content': 'what\'s going on with order "5796018159906"', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': True, 'temperature': 0.7, 'tools': [{'type': 'function', 'function': {'name': 'add_customer_to_crm', 'description': 'Add customer to CRM. \n\nArgs:\n    customer_name (str): Customer name user provided\n    email Optional[str]: Customer email if provided\n    phone Optional[str]: Customer phone number if provided\n    next_follow_up Optional[str]: Follow up date in format YYYY-MM-DD if provided\n    comment Optional[str]: Optional comment that the user provided\n\nReturns:\n    str: id of the crm entry', 'parameters': {'properties': {'customer_name': {'type': 'string'}, 'email': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'phone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'next_follow_up': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'comment': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['customer_name'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'create_draft_order', 'description': 'Creates a draft order in Shopify by passing relevant customer information and product IDs.\nMake sure to have the ids before using this tool. You can get them using metadata tool\n\nArgs:\n    ids (list): List of product variant IDs to be added to the draft order.\n    email (str): The email address of the customer.\n    phone (Optional[str], optional): The phone number of the customer. Defaults to None.\n    first_name (Optional[str], optional): The first name of the customer. Defaults to None.\n    last_name (Optional[str], optional): The last name of the customer. Defaults to None.\n    province_code (Optional[str], optional): The province code for the shipping address. Defaults to None.\n\nReturns:\n    str: Information about the draft order, including success or failure message.', 'parameters': {'properties': {'ids': {'items': {}, 'type': 'array'}, 'email': {'type': 'string'}, 'phone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'first_name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'last_name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'province_code': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['ids', 'email'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'find_order_information', 'description': 'Find order infomation with order number\n\nArgs:\n    order_number (str): Provided order number. Format is usually DXXXXXX or 23XXXX \n\nReturns:\n    str: order data', 'parameters': {'properties': {'order_number': {'type': 'string'}}, 'required': ['order_number'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_product_metadata_information', 'description': 'Search products based on metadata. \nOnly use when some of the following information is needed:\nPrice, title, id, sku, or price. If you need other information, use other tools.\n\nArgs:\n    keywords (str): Keywords such as brand and model that user provided\n\nReturns:\n    str: returns a list of product metadata', 'parameters': {'properties': {'keywords': {'type': 'string'}}, 'required': ['keywords'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_product_information', 'description': 'Search specific product infromation based on keywords.\n\nArgs:\n    keywords (str): Keywords such as brand and model that user provided\n\nReturns:\n    str: documents (scraped webpages) that match the keywords', 'parameters': {'properties': {'keywords': {'type': 'string'}}, 'required': ['keywords'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_email_threads', 'description': 'Search email conversation(s) based on email\n\nArgs:\n    email (str): Email of recipient or sender  \n\nReturns:\n    str: the matching email conversations', 'parameters': {'properties': {'email': {'type': 'string'}}, 'required': ['email'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_email_threads_by_subject', 'description': 'Search email conversation(s) based on subject \n\nArgs:\n    email (str): Email of recipient or sender  \n\nReturns:\n    str: the matching email conversations', 'parameters': {'properties': {'subject': {'type': 'string'}}, 'required': ['subject'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_information_from_manual', 'description': 'Search technical information from product manuals.\nYou have access to following manuals:\n- HUUM HIVE\n- HUUM STEEL\n- HUUM CLIFF\n- HUUM DROP\n- SAUNUM AIR\n- HARVIA KIP\n- HARVIA VIRTA \n\nArgs:\n    query (str): Descriptive query of the information that you are looking for. Include the product name in the query \n\nReturns:\n    str: documents (pages from manuals) that match the query', 'parameters': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_draft_information', 'description': 'Search Draft Orders / Quotes. These are not completed orders but quoted orders.\n\nArgs:\n    order_number (str): Draft order id/number. Usually XXXX or DXXXX\n\nReturns:\n    str: Draft order information', 'parameters': {'properties': {'order_number': {'type': 'string'}}, 'required': ['order_number'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'use_style', 'description': "Get examples of style\nArgs:\n    style (str): Person's name who's style we are usoing \n\nReturns:\n    str: examples of persons style", 'parameters': {'properties': {'style': {'const': 'Cristian', 'type': 'string'}}, 'required': ['style'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_phone_conversation', 'description': 'Search phone conversation transcript\n\nArgs:\n    phone number:\n\nReturns\n    str: transcript of the conversation', 'parameters': {'properties': {'number': {'type': 'string'}}, 'required': ['number'], 'type': 'object'}}}]}}
2025-01-07 08:18:45,966 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-01-07 08:18:45,966 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-01-07 08:18:46,058 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000226DE4D19A0>
2025-01-07 08:18:46,058 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x00000226DE397B50> server_hostname='api.openai.com' timeout=None
2025-01-07 08:18:46,103 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000226DE4D16D0>
2025-01-07 08:18:46,103 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-01-07 08:18:46,103 - DEBUG - send_request_headers.complete
2025-01-07 08:18:46,104 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-01-07 08:18:46,104 - DEBUG - send_request_body.complete
2025-01-07 08:18:46,104 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-01-07 08:18:46,164 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 640
2025-01-07 08:18:46,918 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 07 Jan 2025 07:18:46 GMT'), (b'Content-Type', b'text/event-stream; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-hdboeiskyugtprge1jucywy8'), (b'openai-processing-ms', b'414'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199575'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'127ms'), (b'x-request-id', b'req_28fcfaa7ed3530fbf47ffa59cccfb18c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=OIZAKOal4iym8cPR5Q9QItyXjNFXvn7oM.HQOD6PPqQ-1736234326-1.0.1.1-VaMVGhbiJuixKFqlPHDBPmKtRTBPi2a4ItSWOiQf2jJCAT5imZkk1Eyq7l05PFtlnv5IIEnhF8suY75Xr9kScw; path=/; expires=Tue, 07-Jan-25 07:48:46 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=2yMniBZV.cERXpqyT4QQ2ycN1EXU4TUVPrZk64wZOGk-1736234326683-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fe22cf8fb6f0cf6-MRS'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-01-07 08:18:46,920 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-01-07 08:18:46,920 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 07 Jan 2025 07:18:46 GMT'), ('content-type', 'text/event-stream; charset=utf-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-hdboeiskyugtprge1jucywy8'), ('openai-processing-ms', '414'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199575'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '127ms'), ('x-request-id', 'req_28fcfaa7ed3530fbf47ffa59cccfb18c'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=OIZAKOal4iym8cPR5Q9QItyXjNFXvn7oM.HQOD6PPqQ-1736234326-1.0.1.1-VaMVGhbiJuixKFqlPHDBPmKtRTBPi2a4ItSWOiQf2jJCAT5imZkk1Eyq7l05PFtlnv5IIEnhF8suY75Xr9kScw; path=/; expires=Tue, 07-Jan-25 07:48:46 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=2yMniBZV.cERXpqyT4QQ2ycN1EXU4TUVPrZk64wZOGk-1736234326683-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8fe22cf8fb6f0cf6-MRS'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-01-07 08:18:46,920 - DEBUG - request_id: req_28fcfaa7ed3530fbf47ffa59cccfb18c
2025-01-07 08:18:46,921 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-01-07 08:18:47,111 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/multipart HTTP/1.1" 202 33
2025-01-07 08:18:49,104 - DEBUG - receive_response_body.complete
2025-01-07 08:18:49,104 - DEBUG - response_closed.started
2025-01-07 08:18:49,104 - DEBUG - response_closed.complete
2025-01-07 08:18:49,868 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/multipart HTTP/1.1" 202 33
2025-01-07 08:21:29,989 - DEBUG - Closing Client.session
2025-01-07 08:21:29,990 - DEBUG - Closing Client.session
2025-01-07 08:21:39,427 - INFO - Starting the tools module
2025-01-07 08:21:39,539 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:21:39,569 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.1.24:8000
2025-01-07 08:21:39,569 - INFO - [33mPress CTRL+C to quit[0m
2025-01-07 08:21:39,570 - INFO -  * Restarting with stat
2025-01-07 08:21:40,205 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:21:43,651 - INFO - Starting the tools module
2025-01-07 08:21:43,799 - WARNING -  * Debugger is active!
2025-01-07 08:21:43,804 - INFO -  * Debugger PIN: 100-039-195
2025-01-07 08:21:44,281 - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-01-07 08:22:24,097 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2025-01-07 08:22:24,151 - INFO - 127.0.0.1 - - [07/Jan/2025 08:22:24] "POST /api/eb25919b-2531-4cbc-8267-f8cbc700281e HTTP/1.1" 200 -
2025-01-07 08:22:24,240 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': " You are a helpful customer service assistant for business selling saunas and sauna heaters online.  If the question is about products, orders or conversations with customers, Use provided tools to get information regarding conversations, sold products, orders and other things related to running the customer service  If the question is not about the information available in tools, use your existing knowledge to craft sensible answers  When searching, be persistent. Expand your query bounds if the first search returns no results.  If you don't have answer, just say you couldn't find answer ", 'role': 'system'}, {'content': 'hello', 'role': 'user'}, {'content': 'Hello! How can I assist you today?', 'role': 'assistant'}, {'content': 'what\'s going on with order "5796018159906"', 'role': 'user'}, {'content': None, 'role': 'assistant', 'tool_calls': [{'type': 'function', 'id': 'call_5pVd0XX8WxrV515e7ieOOdn2', 'function': {'name': 'find_order_information', 'arguments': '{"order_number": "5796018159906"}'}}]}, {'content': '{"id": "gid://shopify/Order/5796018159906", "name": "#1008", "createdAt": "2024-06-07T12:40:12Z", "displayFulfillmentStatus": "UNFULFILLED", "customer": {"displayName": "Miika Tuomela", "email": "mktuomela@gmail.com", "phone": null}, "events": [], "fulfillments": [], "lineItems": [{"id": "gid://shopify/LineItem/14636668846370", "title": "Test product 1", "quantity": 1}], "link": "https://admin.shopify.com/store/sisu-apps-demo/orders/gid:"}', 'role': 'tool', 'tool_call_id': 'call_5pVd0XX8WxrV515e7ieOOdn2'}, {'content': 'The order with the number "5796018159906" (Order #1008) was created on June 7, 2024. Here are the details:\n\n- **Customer**: Miika Tuomela\n- **Email**: mktuomela@gmail.com\n- **Fulfillment Status**: Unfulfilled\n- **Items Ordered**: \n  - **Test product 1** (Quantity: 1)\n\nCurrently, the order has not been fulfilled, and there are no fulfillment events recorded yet.\n\nIf you need any further assistance or specific information, feel free to ask!', 'role': 'assistant'}, {'content': 'what\'s going on with order "5796018159906"', 'role': 'user'}, {'content': 'The order with the number "5796018159906" (Order #1008) is still unfulfilled. Here are the details:\n\n- **Customer**: Miika Tuomela\n- **Email**: mktuomela@gmail.com\n- **Fulfillment Status**: Unfulfilled\n- **Items Ordered**: \n  - **Test product 1** (Quantity: 1)\n\nThere have been no fulfillment events recorded for this order yet. If you have any specific questions or need further assistance regarding this order, please let me know!', 'role': 'assistant'}, {'content': 'what\'s going on with order "5796018159906"', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': True, 'temperature': 0.7, 'tools': [{'type': 'function', 'function': {'name': 'add_customer_to_crm', 'description': 'Add customer to CRM. \n\nArgs:\n    customer_name (str): Customer name user provided\n    email Optional[str]: Customer email if provided\n    phone Optional[str]: Customer phone number if provided\n    next_follow_up Optional[str]: Follow up date in format YYYY-MM-DD if provided\n    comment Optional[str]: Optional comment that the user provided\n\nReturns:\n    str: id of the crm entry', 'parameters': {'properties': {'customer_name': {'type': 'string'}, 'email': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'phone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'next_follow_up': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'comment': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['customer_name'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'create_draft_order', 'description': 'Creates a draft order in Shopify by passing relevant customer information and product IDs.\nMake sure to have the ids before using this tool. You can get them using metadata tool\n\nArgs:\n    ids (list): List of product variant IDs to be added to the draft order.\n    email (str): The email address of the customer.\n    phone (Optional[str], optional): The phone number of the customer. Defaults to None.\n    first_name (Optional[str], optional): The first name of the customer. Defaults to None.\n    last_name (Optional[str], optional): The last name of the customer. Defaults to None.\n    province_code (Optional[str], optional): The province code for the shipping address. Defaults to None.\n\nReturns:\n    str: Information about the draft order, including success or failure message.', 'parameters': {'properties': {'ids': {'items': {}, 'type': 'array'}, 'email': {'type': 'string'}, 'phone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'first_name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'last_name': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}, 'province_code': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}, 'required': ['ids', 'email'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'find_order_information', 'description': 'Find order infomation with order number\n\nArgs:\n    order_number (str): Provided order number. Format is usually DXXXXXX or 23XXXX \n\nReturns:\n    str: order data', 'parameters': {'properties': {'order_number': {'type': 'string'}}, 'required': ['order_number'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_product_metadata_information', 'description': 'Search products based on metadata. \nOnly use when some of the following information is needed:\nPrice, title, id, sku, or price. If you need other information, use other tools.\n\nArgs:\n    keywords (str): Keywords such as brand and model that user provided\n\nReturns:\n    str: returns a list of product metadata', 'parameters': {'properties': {'keywords': {'type': 'string'}}, 'required': ['keywords'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_product_information', 'description': 'Search specific product infromation based on keywords.\n\nArgs:\n    keywords (str): Keywords such as brand and model that user provided\n\nReturns:\n    str: documents (scraped webpages) that match the keywords', 'parameters': {'properties': {'keywords': {'type': 'string'}}, 'required': ['keywords'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_email_threads', 'description': 'Search email conversation(s) based on email\n\nArgs:\n    email (str): Email of recipient or sender  \n\nReturns:\n    str: the matching email conversations', 'parameters': {'properties': {'email': {'type': 'string'}}, 'required': ['email'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_email_threads_by_subject', 'description': 'Search email conversation(s) based on subject \n\nArgs:\n    email (str): Email of recipient or sender  \n\nReturns:\n    str: the matching email conversations', 'parameters': {'properties': {'subject': {'type': 'string'}}, 'required': ['subject'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_information_from_manual', 'description': 'Search technical information from product manuals.\nYou have access to following manuals:\n- HUUM HIVE\n- HUUM STEEL\n- HUUM CLIFF\n- HUUM DROP\n- SAUNUM AIR\n- HARVIA KIP\n- HARVIA VIRTA \n\nArgs:\n    query (str): Descriptive query of the information that you are looking for. Include the product name in the query \n\nReturns:\n    str: documents (pages from manuals) that match the query', 'parameters': {'properties': {'query': {'type': 'string'}}, 'required': ['query'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_draft_information', 'description': 'Search Draft Orders / Quotes. These are not completed orders but quoted orders.\n\nArgs:\n    order_number (str): Draft order id/number. Usually XXXX or DXXXX\n\nReturns:\n    str: Draft order information', 'parameters': {'properties': {'order_number': {'type': 'string'}}, 'required': ['order_number'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'use_style', 'description': "Get examples of style\nArgs:\n    style (str): Person's name who's style we are usoing \n\nReturns:\n    str: examples of persons style", 'parameters': {'properties': {'style': {'const': 'Cristian', 'type': 'string'}}, 'required': ['style'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'get_phone_conversation', 'description': 'Search phone conversation transcript\n\nArgs:\n    phone number:\n\nReturns\n    str: transcript of the conversation', 'parameters': {'properties': {'number': {'type': 'string'}}, 'required': ['number'], 'type': 'object'}}}]}}
2025-01-07 08:22:24,243 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-01-07 08:22:24,244 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-01-07 08:22:24,335 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FEBAA16930>
2025-01-07 08:22:24,335 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001FEBA8DBAD0> server_hostname='api.openai.com' timeout=None
2025-01-07 08:22:24,379 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FEBA9AD280>
2025-01-07 08:22:24,380 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-01-07 08:22:24,380 - DEBUG - send_request_headers.complete
2025-01-07 08:22:24,380 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-01-07 08:22:24,381 - DEBUG - send_request_body.complete
2025-01-07 08:22:24,381 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-01-07 08:22:24,436 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 640
2025-01-07 08:22:24,974 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 07 Jan 2025 07:22:24 GMT'), (b'Content-Type', b'text/event-stream; charset=utf-8'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-hdboeiskyugtprge1jucywy8'), (b'openai-processing-ms', b'225'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199453'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'163ms'), (b'x-request-id', b'req_f77d9908de3aff06f097255f09cca895'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=xjkB8zhtxIW_G88pom2NrCS.cQbQmHZezInDD_9Nwmw-1736234544-1.0.1.1-NnwYoPePktsLAk9.VqMNmkh4R26QOJYH8vdfg__733jtG1LhTGq_ASsEYSalZ_YOUivlMhtVfV9d8BDbpbDGvQ; path=/; expires=Tue, 07-Jan-25 07:52:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=gm49XVpOJr.xZggaFYIFMH7..DrhdWlT0vgax_zmavk-1736234544761-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fe2324d4da01854-MRS'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-01-07 08:22:24,975 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-01-07 08:22:24,975 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 07 Jan 2025 07:22:24 GMT'), ('content-type', 'text/event-stream; charset=utf-8'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-hdboeiskyugtprge1jucywy8'), ('openai-processing-ms', '225'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199453'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '163ms'), ('x-request-id', 'req_f77d9908de3aff06f097255f09cca895'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=xjkB8zhtxIW_G88pom2NrCS.cQbQmHZezInDD_9Nwmw-1736234544-1.0.1.1-NnwYoPePktsLAk9.VqMNmkh4R26QOJYH8vdfg__733jtG1LhTGq_ASsEYSalZ_YOUivlMhtVfV9d8BDbpbDGvQ; path=/; expires=Tue, 07-Jan-25 07:52:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=gm49XVpOJr.xZggaFYIFMH7..DrhdWlT0vgax_zmavk-1736234544761-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8fe2324d4da01854-MRS'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-01-07 08:22:24,976 - DEBUG - request_id: req_f77d9908de3aff06f097255f09cca895
2025-01-07 08:22:24,976 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-01-07 08:22:25,009 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/multipart HTTP/1.1" 202 33
2025-01-07 08:22:26,894 - DEBUG - receive_response_body.complete
2025-01-07 08:22:26,894 - DEBUG - response_closed.started
2025-01-07 08:22:26,894 - DEBUG - response_closed.complete
2025-01-07 08:22:27,328 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/multipart HTTP/1.1" 202 33
2025-01-07 08:23:30,583 - DEBUG - Closing Client.session
2025-01-07 08:23:30,584 - DEBUG - Closing Client.session
